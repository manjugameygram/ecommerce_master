{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from 'react';\nvar PADDINGS = 110;\n\nvar useSliding = function useSliding(elementWidth, countElements) {\n  _s();\n\n  var containerRef = useRef(null);\n\n  var _useState = useState(0),\n      containerWidth = _useState[0],\n      setContainerWidth = _useState[1];\n\n  var _useState2 = useState(0),\n      distance = _useState2[0],\n      setDistance = _useState2[1];\n\n  var _useState3 = useState(0),\n      totalInViewport = _useState3[0],\n      setTotalInViewport = _useState3[1];\n\n  var _useState4 = useState(0),\n      viewed = _useState4[0],\n      setViewed = _useState4[1];\n\n  useEffect(function () {\n    var containerWidth = containerRef.current.clientWidth - PADDINGS;\n    setContainerWidth(containerWidth);\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\n  }, [containerRef.current]);\n\n  var handlePrev = function handlePrev() {\n    setViewed(viewed - totalInViewport);\n    setDistance(distance + containerWidth);\n  };\n\n  var handleNext = function handleNext() {\n    setViewed(viewed + totalInViewport);\n    setDistance(distance - containerWidth);\n  };\n\n  var slideProps = {\n    style: {\n      transform: \"translate3d(\".concat(distance, \"px, 0, 0)\")\n    }\n  };\n  var hasPrev = distance < 0;\n  var hasNext = viewed + totalInViewport < countElements;\n  return {\n    handlePrev: handlePrev,\n    handleNext: handleNext,\n    slideProps: slideProps,\n    containerRef: containerRef,\n    hasPrev: hasPrev,\n    hasNext: hasNext\n  };\n};\n\n_s(useSliding, \"FRpOwf0v1CChGg8Cxv62hfkLoYE=\");\n\nexport default useSliding;","map":{"version":3,"sources":["/Users/rajeshthakur/Desktop/Files/Work/GameyGram/Projects/ecommerce/components/Common/NetflixSlider/useSliding.js"],"names":["useState","useRef","useEffect","PADDINGS","useSliding","elementWidth","countElements","containerRef","containerWidth","setContainerWidth","distance","setDistance","totalInViewport","setTotalInViewport","viewed","setViewed","current","clientWidth","Math","floor","handlePrev","handleNext","slideProps","style","transform","hasPrev","hasNext"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AAEA,IAAMC,QAAQ,GAAG,GAAjB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,YAAD,EAAeC,aAAf,EAAiC;AAAA;;AAClD,MAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B;;AADkD,kBAEND,QAAQ,CAAC,CAAD,CAFF;AAAA,MAE3CQ,cAF2C;AAAA,MAE3BC,iBAF2B;;AAAA,mBAGlBT,QAAQ,CAAC,CAAD,CAHU;AAAA,MAG3CU,QAH2C;AAAA,MAGjCC,WAHiC;;AAAA,mBAIJX,QAAQ,CAAC,CAAD,CAJJ;AAAA,MAI3CY,eAJ2C;AAAA,MAI1BC,kBAJ0B;;AAAA,mBAKtBb,QAAQ,CAAC,CAAD,CALc;AAAA,MAK3Cc,MAL2C;AAAA,MAKnCC,SALmC;;AAOlDb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMM,cAAc,GAAGD,YAAY,CAACS,OAAb,CAAqBC,WAArB,GAAmCd,QAA1D;AAEAM,IAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACAK,IAAAA,kBAAkB,CAACK,IAAI,CAACC,KAAL,CAAWX,cAAc,GAAGH,YAA5B,CAAD,CAAlB;AACD,GALQ,EAKN,CAACE,YAAY,CAACS,OAAd,CALM,CAAT;;AAOA,MAAMI,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBL,IAAAA,SAAS,CAACD,MAAM,GAAGF,eAAV,CAAT;AACAD,IAAAA,WAAW,CAACD,QAAQ,GAAGF,cAAZ,CAAX;AACD,GAHD;;AAKA,MAAMa,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBN,IAAAA,SAAS,CAACD,MAAM,GAAGF,eAAV,CAAT;AACAD,IAAAA,WAAW,CAACD,QAAQ,GAAGF,cAAZ,CAAX;AACD,GAHD;;AAKA,MAAMc,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,wBAAiBd,QAAjB;AAAX;AADU,GAAnB;AAIA,MAAMe,OAAO,GAAGf,QAAQ,GAAG,CAA3B;AACA,MAAMgB,OAAO,GAAIZ,MAAM,GAAGF,eAAV,GAA6BN,aAA7C;AAEA,SAAO;AAAEc,IAAAA,UAAU,EAAVA,UAAF;AAAcC,IAAAA,UAAU,EAAVA,UAAd;AAA0BC,IAAAA,UAAU,EAAVA,UAA1B;AAAsCf,IAAAA,YAAY,EAAZA,YAAtC;AAAoDkB,IAAAA,OAAO,EAAPA,OAApD;AAA6DC,IAAAA,OAAO,EAAPA;AAA7D,GAAP;AACD,CAhCD;;GAAMtB,U;;AAkCN,eAAeA,UAAf","sourcesContent":["import { useState, useRef, useEffect } from 'react'\n\nconst PADDINGS = 110;\n\nconst useSliding = (elementWidth, countElements) => {\n  const containerRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [totalInViewport, setTotalInViewport] = useState(0)\n  const [viewed, setViewed] = useState(0);\n\n  useEffect(() => {\n    const containerWidth = containerRef.current.clientWidth - PADDINGS;\n\n    setContainerWidth(containerWidth);\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\n  }, [containerRef.current]);\n\n  const handlePrev = () => {\n    setViewed(viewed - totalInViewport);\n    setDistance(distance + containerWidth);\n  }\n\n  const handleNext = () => {\n    setViewed(viewed + totalInViewport);\n    setDistance(distance - containerWidth)\n  }\n\n  const slideProps = {\n    style: { transform: `translate3d(${distance}px, 0, 0)` }\n  };\n\n  const hasPrev = distance < 0;\n  const hasNext = (viewed + totalInViewport) < countElements;\n\n  return { handlePrev, handleNext, slideProps, containerRef, hasPrev, hasNext };\n}\n\nexport default useSliding;"]},"metadata":{},"sourceType":"module"}